/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import Operaciones.Operaciones;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.Socket;
import static java.sql.DriverManager.println;
import javax.swing.JOptionPane;

/**
 *
 * @author dell
 */
public class Cliente extends javax.swing.JFrame {

    /**
     * Creates new form Cliente
     */
    //INSTANCIAR LA CLASE SOperaciones
    Operaciones sum = new Operaciones();
    Operaciones rest = new Operaciones();
    Operaciones multiplicacio = new Operaciones();
    Operaciones divisio = new Operaciones();

    static Socket cliente;
    static DataInputStream recibir;
    static DataOutputStream envia;

    public Cliente() {
        initComponents();
    }

    //Método de la operación Suma
    public String OpSuma(double x, double y) {
        double suma = sum.suma(x, y);
        String resultado = "suma " + suma;
        return resultado;
    }

    //Método de la operación Resta
    public String OpResta(double x, double y) {
        double resta = rest.resta(x, y);
        String resultado = "resta " + resta;
        return resultado;
    }

    //Método de la operación Multiplicación
    public String OpMultiplicacion(double x, double y) {
        double multiplicacion = multiplicacio.multiplicacion(x, y);
        String resultado = "multiplicacion " + multiplicacion;
        return resultado;
    }

    //Método de la operación División
    public String OpDivision(double x, double y) {
        double division = divisio.division(x, y);
        String resultado = "division " + division;
        return resultado;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnEnviar = new javax.swing.JButton();
        txtDatos = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jCBOperaciones = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnEnviar.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        btnEnviar.setText("ENVIAR");
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        txtDatos.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N

        jLabel1.setText("Ingresa los datos separados por un guión");

        jLabel2.setText("Selecciona la operación que deseas realizar");

        jCBOperaciones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una opción", "Suma", "Resta", "Multiplicación", "División" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCBOperaciones, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jCBOperaciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEnviar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        // TODO add your handling code here:
        String variable = (String) jCBOperaciones.getSelectedItem();
        if (variable.equals("Seleccione una opción")) {
            JOptionPane.showMessageDialog(this, "Seleccione una operación");
        } else {

            if (variable.equals("Suma"))
            {
                try
                {
                    String[] mensaje = txtDatos.getText().trim().split("-");
                    if (mensaje.length != 2)
                    {
                        JOptionPane.showMessageDialog(null, "Ingrese dos numeros separados por un guión");
                    } else
                    {
                        envia.writeUTF(OpSuma(Double.parseDouble(mensaje[0]),
                                Double.parseDouble(mensaje[1])));
                    }
                } catch (Exception e)
                {
                    if (e.equals("java.lang.NullPointerException"))
                    {
                        JOptionPane.showMessageDialog(null, "ERROR: No se ha establecido conexión con el servidor");
                    } else
                    {
                        JOptionPane.showMessageDialog(null, "ERROR: El formato de los datos no es correcto");
                    }
                }

            } else
            {
                if (variable.equals("Resta"))
                {
                    try
                    {
                        String[] mensaje = txtDatos.getText().trim().split("-");
                        if (mensaje.length != 2)
                        {
                            JOptionPane.showMessageDialog(null, "Ingrese dos numeros separados por un guión");
                        } else
                        {
                            envia.writeUTF(OpResta(Double.parseDouble(mensaje[0]),
                                    Double.parseDouble(mensaje[1])));
                        }
                    } catch (Exception e)
                    {
                        if (e.equals("java.lang.NullPointerException"))
                        {
                            JOptionPane.showMessageDialog(null, "ERROR: No se ha establecido conexión con el servidor");
                        } else {
                            JOptionPane.showMessageDialog(null, "ERROR: El formato de los datos no es correcto");
                        }
                    }

                } else {
                    if (variable.equals("Multiplicación")) {

                        try {
                            String[] mensaje = txtDatos.getText().trim().split("-");
                            if (mensaje.length != 2) {
                                JOptionPane.showMessageDialog(null, "Ingrese dos numeros separados por un guión");
                            } else {
                                envia.writeUTF(OpMultiplicacion(Double.parseDouble(mensaje[0]),
                                        Double.parseDouble(mensaje[1])));
                            }
                        } catch (Exception e) {
                            if (e.equals("java.lang.NullPointerException")) {
                                JOptionPane.showMessageDialog(null, "ERROR: No se ha establecido conexión con el servidor");
                            } else {
                                JOptionPane.showMessageDialog(null, "ERROR: Que el formato de los datos sean los correctos");
                            }
                        }

                    } else {
                        if (variable.equals("División")) {
                            try {
                                String[] mensaje = txtDatos.getText().trim().split("-");
                                if (mensaje.length != 2) {
                                    JOptionPane.showMessageDialog(null, "Ingrese dos numeros separados por un guión");
                                } else {
                                    envia.writeUTF(OpDivision(Double.parseDouble(mensaje[0]),
                                            Double.parseDouble(mensaje[1])));
                                }
                            } catch (Exception e) {
                                if (e.equals("java.lang.NullPointerException")) {
                                    JOptionPane.showMessageDialog(null, "ERROR: No se ha establecido conexión con el servidor");
                                } else {
                                    JOptionPane.showMessageDialog(null, "ERROR: Que el formato de los datos sean los correctos");
                                }
                            }
                        }
                    }
                }
            }

        }


    }//GEN-LAST:event_btnEnviarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cliente().setVisible(true);
            }
        });

        try {
            cliente = new Socket("192.168.0.108", 1201);
            recibir = new DataInputStream(cliente.getInputStream());
            envia = new DataOutputStream(cliente.getOutputStream());
            String mensaje = "";
            while (!mensaje.equals("exit")) {
                mensaje = recibir.readUTF();
                System.out.println("Resultado: " + mensaje);
            }
        } catch (Exception e) {
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEnviar;
    private javax.swing.JComboBox<String> jCBOperaciones;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField txtDatos;
    // End of variables declaration//GEN-END:variables
}
